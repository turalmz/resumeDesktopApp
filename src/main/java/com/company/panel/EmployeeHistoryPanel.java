/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company.panel;

import com.company.Context;
import com.company.dao.inter.EmpHistoryDaoInter;
import com.company.dao.inter.UserEmpHistoryDaoInter;
import com.company.entity.EmpHistory;
import com.company.entity.User;
import com.company.entity.UserSkill;
import com.company.resume.Config;
import java.sql.Date;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TURAL
 */
public class EmployeeHistoryPanel extends javax.swing.JPanel {

    /**
     * Creates new form EmployeeHistoryPanel
     */
    private EmpHistoryDaoInter empHistoryDao = Context.instanceEmpHistoryDao();
    private UserEmpHistoryDaoInter userEmpHistoryDao = Context.instanceUserEmpHistoryDao();
    private List<EmpHistory> userEmpHistList = new ArrayList<EmpHistory>();

    public EmployeeHistoryPanel() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addEmpHistory = new javax.swing.JButton();
        saveEmpHistory = new javax.swing.JButton();
        deleteEmpHistory = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEmpHistory = new javax.swing.JTable();
        txtHeader = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        txtBeginDate = new javax.swing.JTextField();
        txtEndDate = new javax.swing.JTextField();

        addEmpHistory.setText("add");
        addEmpHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmpHistoryActionPerformed(evt);
            }
        });

        saveEmpHistory.setText("save");
        saveEmpHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEmpHistoryActionPerformed(evt);
            }
        });

        deleteEmpHistory.setText("delete");
        deleteEmpHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmpHistoryActionPerformed(evt);
            }
        });

        tblEmpHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblEmpHistory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addEmpHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(deleteEmpHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBeginDate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveEmpHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBeginDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveEmpHistory))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteEmpHistory)
                    .addComponent(addEmpHistory))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addEmpHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmpHistoryActionPerformed
        if (txtHeader.getText().trim().isEmpty()) {

            EmpHistory eh = new EmpHistory(0, Config.loggedInUser, txtHeader.getText(), null, null, txtDescription.getText());
            try {
                long l = Config.sdf.parse(txtBeginDate.getText()).getTime();
                Date bd = new Date(l);
                eh.setBeginDate(bd);

            } catch (ParseException ex) {
                System.out.print("Houston, we have a problem");
            }
            try {
                long l = Config.sdf.parse(txtEndDate.getText()).getTime();
                Date bd = new Date(l);
                eh.setEndDate(bd);

            } catch (ParseException ex) {
                System.out.print("Houston, we have a problem");
            }

            empHistoryDao.insertEmpHistory(eh);

        }
        fillTable();

    }//GEN-LAST:event_addEmpHistoryActionPerformed

    public void fillUserComponent() {
        fillTable();
    }

    public void fillTable() {
        DefaultTableModel tableModel = new DefaultTableModel();
        Vector vectorHeaders = new Vector();

        vectorHeaders.add("id");

        vectorHeaders.add("Header");
        vectorHeaders.add("Job Description");

        vectorHeaders.add("Begin Date");
        vectorHeaders.add("End Date");

        Vector vectorRows = new Vector();
        userEmpHistList = userEmpHistoryDao.getAllEmpHistoryByUserId(Config.loggedInUser.getId());
        for (EmpHistory eh : userEmpHistList) {

            Vector row = new Vector();
            row.add(eh.getId());

            row.add(eh.getHeader());
            row.add(eh.getJobDescription());
            try {
                Date dt = eh.getBeginDate();
                String sdt = Config.sdf.format(dt);
                row.add(sdt);

            } catch (Exception ex) {
                row.add(null);

            }

            try {
                Date dt = eh.getEndDate();
                String sdt = Config.sdf.format(dt);
                row.add(sdt);

            } catch (Exception ex) {
                row.add(null);

            }
            vectorRows.add(row);
        }
        tableModel.setDataVector(vectorRows, vectorHeaders);
        tblEmpHistory.setModel(tableModel);

    }
    private void saveEmpHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEmpHistoryActionPerformed
        int column = 0;

        int index = tblEmpHistory.getSelectedRow();
        System.out.println("Count : " + index);
        if (index > -1) {
            EmpHistory eh = userEmpHistList.get(index);
            if (txtHeader.getText().trim().isEmpty()) {

                eh = new EmpHistory(eh.getId(), Config.loggedInUser, txtHeader.getText(), null, null, txtDescription.getText());
                try {
                    long l = Config.sdf.parse(txtBeginDate.getText()).getTime();
                    Date bd = new Date(l);
                    eh.setBeginDate(bd);

                } catch (ParseException ex) {
                    System.out.print("Houston, we have a problem");
                }
                try {
                    long l = Config.sdf.parse(txtEndDate.getText()).getTime();
                    Date bd = new Date(l);
                    eh.setEndDate(bd);

                } catch (ParseException ex) {
                    System.out.print("Houston, we have a problem");
                }

                empHistoryDao.updateEmpHistory(eh);

            }
            fillTable();

        }


    }//GEN-LAST:event_saveEmpHistoryActionPerformed

    private void deleteEmpHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmpHistoryActionPerformed

        int index = tblEmpHistory.getSelectedRow();
        System.out.println("Count : " + index);
        if (index > -1) {

            EmpHistory eh = userEmpHistList.get(index);
            empHistoryDao.removeEmpHistory(eh.getId());
        }
        fillTable();

    }//GEN-LAST:event_deleteEmpHistoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEmpHistory;
    private javax.swing.JButton deleteEmpHistory;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton saveEmpHistory;
    private javax.swing.JTable tblEmpHistory;
    private javax.swing.JTextField txtBeginDate;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtEndDate;
    private javax.swing.JTextField txtHeader;
    // End of variables declaration//GEN-END:variables

    public void fillUser(User usr) {

    }
}
